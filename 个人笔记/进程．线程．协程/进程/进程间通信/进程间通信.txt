
进程间通信　（IPC)

    原因：进程间相对独立，资源无法相互获取，此时在
        不同进程间需要专门的方法进行通信

    进程间通信方法：　管道  　  消息队列    　共享内存
                　　信号　  　信号量       套接字 


         管道             消息队列        共享内存
       
开辟空间  内存             内存              内存

读写方式  两端读写         先进先出       覆盖之前内容

效率      一般             一般           较高

特点     多用于父子进程  很多第三方队列  注意同步互斥


    
管道通信（pipe)
        通信原理：在内存中开辟管道空间，生成管道操作对象，
        多个进程使用同一个管道对象读写即可实现通信


    from multiprocessing import Pipe

    fd1,fd2 = Pipe(duplex = True)
    功能：创建管道
    参数：默认表示双向管道，如果设置为Flase，则表示单向管道

    返回值：表示管道的两端读写对象
        　　如果是双向管道均可读写
            如果是单向管道则fd1只读，fd2只写

    fd.recv()
        功能：从管道读取内容，无内容则阻塞
        返回值：　读取到的内容

    fd.send(data)
        功能：向管道写入内容
        参数：要写入的内容




消息队列：

    队列：存储模型，线性的，先进先出原则
    原理：在内存中建立队列模型，进程通过
        队列对象将消息存入队列，或从队列
        取出消息，完成进程间通信

from multiprocessing import Queue

 q = Queue()
 功能：创建队列对象
 参数：表示队列中最多存放消息的个数
 返回值：队列对象

 q.put(data,[block,timeout])
 功能：　向队列存入的内容
 参数：　data 要存入的内容
        block 默认队列满时会阻塞，设置为
        　　　　False　则为非阻塞
        timeout  超时时间

q.get([block,timeout])
功能：　从队列取出消息
参数：　block　默认队列为空会阻塞，设置为False
    　      　则非阻塞
       timeout  超时时间
返回值：取出内容

q.full() 判断队列是否为满
q.empty() 判断队列是否为空
q.qsize() 获取队列中消息个数
q.close() 关闭队列


共享内存

通信原理： 在内存中开辟一块区域，对多个进程可见，进程 
           可以写入和读取内容，但是每次写入内容会覆
	   盖之前的内容

from multiprocessing import Value,Array 

obj = Value(ctype,obj)
功能： 开辟共享内存空间
参数： ctype  字符串，表示共享内存中存储的数据类型

	       int -->'i'
	       float --> 'f'
               char(bytes) --> 'c'

       obj  共享内存中的初始化数据
      
obj.value  对该属性的修改和使用即对共享内存读写


obj = Array(ctype,obj)
功能： 开辟共享内存空间
参数： ctype  字符串，表示共享内存中存储的数据类型
       obj  存入一个结构化数据（列表，bytes字串）表示
            共享内存的初始数据
	    或者传入一个整数，表示开辟多大的结构空间
返回值： 共享内存对象

共享内存读写：* 可以通过遍历共享内存对象获取每个值，
                同时支持索引操作
                e.g.   obj[1] 表示获取第二项

               * 如果存入字节串，可以使用obj.value直接   打印


 
