进程池
    产生原因：如果有大量任务需要进程完成，则
    可能需要频繁的创建删除进程，给计算机带来
    压力较大，进程池正是为了解决此问题

    原理：创建进程池，放入一定量的进程，用来
    　　　处理事件．事件处理完毕后，进程不退出
        　而是继续等待处理其他事件，直到所有
        　待处理事件结束再统一销毁进程池，增加
        　进程的重复利用，降低资源消耗．
    
    步骤：
        1.创建进程池，添加适当进程
        2.将要完成的事件放入进程池等待队列
        3.不断取事件交由进程池中的进程完成，
        　　直到所有事件处理完毕
        4.关闭进程池回收进程


from multiprocessing import pool

pool = pool(processes)
　　功能： 创建进程池对象
   参数：　进程池中进程数量，默认根据系统自动判定


pool.apply_async(func,args,kwds)
　 功能：使用进程池中的进程执行函数事件
　　参数：　func 要执行的函数
        　args 元组　给func位置传参
          kwds 字典  给func键值传参
    返回值：函数事件对象，通过.get()方法
        可以获取func返回值
    * 异步执行，多个进程一同执行

pool.apply(func,args,kwds)
　 功能：使用进程池中的进程执行函数事件
　　参数：　func 要执行的函数
        　args 元组　给func位置传参
          kwds 字典  给func键值传参
    * 同步执行，一个一个执行

pool.close()
    功能：关闭进程池，不能再添加新的进程函数

poll,join()
    功能：回收进程池

＊进程池事件func一定在进程池创建之前声明

pool.map(func,iter)
    功能：将要做的事件加入进程池执行
    参数：
        func 要执行的函数
        iter 迭代对象

    返回值：函数返回列表



