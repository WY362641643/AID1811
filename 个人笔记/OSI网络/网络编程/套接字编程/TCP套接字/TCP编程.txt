

tcp套接字编程

服务端：
    创建套接字 -->绑定地址-->监听-->等待客户端链接-->接收\返回消息 --> 退出
    socket()-->bind()-->listen()-->accept()-->recv()\send()-->close()

客户端：
    创建字节套-->链接服务端-->发送＼接收消息 --> 退出
    socket()-->connect()-->send()/recv()-->close()



服务端
    from socket import *

    1. 创建套接字

        sockfd = socket(socket_family=AF_INET,
                        socket_type=SOCK_STREAM,
                    proto=0)
            功能: 创建套接字对象
            参数：socket_family      地址族类型 AF_INET-->IPv4
                socket_type        套接字类型 SOCK_STREAM-->流式
                                            SOCK_DGRAM-->数据报
                proto              通常为0 
        
            返回值 ： 套接字对象


    2. 绑定地址

        sockfd.bind(addr)
            功能： 绑定服务器地址
            参数： addr  以元组形式给出服务器地址
                    e.g. ('192.168.1.2',8888)


    3. 设置监听套接字

        sockfd.listen(n)
            功能： 设置监听套接字，建立监听队列
            参数： 监听队列大小

    4. 等待客户端连接

        connfd,addr = sockfd.accept()
        功能： 阻塞等待处理客户端连接
        返回值： connfd 客户端连接套接字
                addr   客户端地址

    * 阻塞函数： 程序运行过程中遇到阻塞函数会暂停执行，
                  直到达成某种条件再继续运行

    5. 消息收发

        data = connfd.recv(buffersize)
        功能： 阻塞 等待接受客户端消息
        参数： 整数，一次最多接受多少字节消息
        返回值 ： 接受到的内容

        n = connfd.send(data)
        功能： 发送数据
        参数： 要发送的内容  bytes格式
                str-->bytes   encode()
                bytes-->str   decode()

        返回值： 实际发送数据的大小（字节）

    6. 关闭套接字

        sockfd.close()
        功能： 关闭套接字



客户端

    1. 创建套接字
        sockfd = socket（）
        * 要求数据传输两端套接字类型必须相同

    2. 发起连接
        sockfd.connect(addr)
        功能： 发起连接请求
        参数： addr    元组， 服务端地址

    3. 消息的收发
        recv()/send()
        * 服务端和客户端的收发搭配

    4. 关闭套接字



tcp套接字传输特征

    1. 当一端退出时，另一端如果阻塞在recv，此时recv会立即
        结束阻塞返回空字串
    2. 如果另一端退出，此时再试图调用send向其发送时会出现
        BrokenPipeError异常
    3. 一个监听套接字可以同时连接多个客户端套接字


    网络收发缓冲区

        * send和recv实际是向缓冲区发送和接收内容
        * 只要缓冲区有内容recv就会接收，直到接收缓冲区为空
        * 协调网络消息的收发速度

TCP粘包

    产生原因： 
        1. 多次发送的消息被一次接受
        2. tcp消息以字节流的方式传输，没有消息边界

    影响： 如果每次发送的内容是一个独立含义的个体，粘包会 
           产生一定影响

    处理粘包： 
        1. 消息结尾添加边界
        2. 发送消息采取延迟策略
        3. 将消息结构化处理
    



详见：code文件夹

作业： 1.对要的的问题，自己能够口述回答
       2.熟练掌握所学函数
       3.将示例改为可以从客户端不断发送接收
       4. 复习 文件操作 
