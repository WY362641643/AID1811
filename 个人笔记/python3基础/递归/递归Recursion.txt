

递归 Recursion
  递归是指函数直接或间接的调用自身

示意:
  def f():
      f()  # 直接调用自身
  f()

  # 间接调用自身
  def fa():
      fb()
  def fb():
      fa()
  fa()

说明:
  递归一定要控制递归的层数，当符合一定条件时要终止递归
  几乎所有的递归都能用while循环来代替

递归分为两个阶段:
  递推阶段:
    从原问题出发，按递归公式,从未知到已知,最终返回
  回归阶段
    按递归终止条件，逆向代入递归公式,回归到原问题求解

问题:
  局部变量在什么时候会自动销毁？
    函数结束后才自动销毁(如果函数尚末结束则局部变量不会销毁)
  同一个函数能有几个同名的局部变量？
    调用几次就有几个局部变量
    

示例见:
  recursion.py
  recursion_factorial.py

练习:
  1. 试写一个递归函数 mysum(n), 此函数用递归方式求
    1 + 2 + 3 + 4 + .... + n 的和
    def mysum(n):
        .... # 此处自己实现
    print(mysum(100))  # 5050

  2. 已知有五位朋友在一起:
    第五个人说他比第四个人大2岁
    第四个人说他比第三个人大2岁
    第三个人说他比第二个人大2岁
    第二个人说他比第一个人大2岁
    第一个人说他十岁
    写函数get_age(n)求 第三个人几岁，第五个人几岁
    
递归的优缺点:
  # 递归一定要控制递归的层数，当符合某一条件时要终止递归调用
  优点:
    递归可以把问题简单化，让思路更用清晰，代码更简洁
  缺点:
    递归因系统环境影响大，当递归深度太大时，可能会得到不可
    预知的结果

