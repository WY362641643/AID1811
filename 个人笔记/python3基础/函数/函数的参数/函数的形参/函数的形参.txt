
函数形参的定义方式:
  1. 位置形参
  2. 星号元组形参
  3. 命名关键字形参
  4. 双星号字典形参

位置形参:
  语法:
    def 函数名(形参1, 形参2, ...):
        语句块
  
星号元组形参:
  语法:
    def 函数名(*元组形参名):
        语句块
  作用:
    收集多余的位置传参
  说明:
    元组形参名一般命名为 'args'
  示例见:
    star_tuple_args.py


命名关键字形参
  语法:
    def 函数名(*,命名关键字形参1, 命名关键字形参2, ...):
        语句块
    或
    def 函数名(*args,命名关键字形参1, 命名关键字形参2, ...):
        语句块
  作用:
    强制所有的参数都必须用关键字传参或字典关键字传参传递
  示例见:
    named_keyword_args.py
    named_keyword_args2.py


双星号字典形参:
  语法:
    def 函数名(**字典形参名):
        语句块
  作用:
    收集多余的关键字传参
  说明:
    字典形参名一般命名为'kwargs'
    一个函数内字典形参最多只能有一个
  示例:
    dict_keyword_args.py


函数的参数说明:
  位置形参,缺省参数,星号元组形参,双星号字典形参可以混合使用

  函数参数自左至右的顺序为:
    位置形参
    星号元组形参
    命名关键字形参
    双星号字典形参
  示例:
    def fn(a, b, *args, c, **kwargs):
        pass
    
    def fn(100, 200, 300, 400, c=1, d=2, e=3)


可以接收任意的位置传参和关键字传参的形参列表
  def fn(*args, **kwargs):
      print(args, kwargs)
    

练习:
  写一个函数,mysum,可以传入任意个数字实参,返回所有实参的和
    如:
      def mysum(...):
          ...
      
      print(mysum(1, 2))  # 3
      print(mysum(1, 2, 3, 4))  # 10
      print(mysum(1, 2, 3, 4, 5, 6, 7, 8)) # 36

练习:
  已知内建函数 max 的帮助文档是:
    >>> help(max)
    max(iterable)
    max(arg1, arg2, *args)
  仿造max写一个mymax函数,功能与max函数完全相同
    (要求:不允许调用 max 函数)

    print(mymax([6, 8, 5, 3]))  # 8
    print(mymax(100, 200))      # 200
    print(mymax(1, 2, 5, 9, 7)) # 9

