
函数变量
  函数名是变量,它在创建函数绑定一个函数

  示例1:
def f1():
    print("f1被调用")

f2 = f1  # <<< 注意这里f1没加括号
f2()　　# f1被调用
f1()   # f1被调用
  示例2
def f1():
    print("f1")

def f2():
    print("f2")

f1, f2 = f2, f1  # 交换两个变量的绑定关系
f1()  # 打印f2


一个函数可以作为另一个函数的实参传递
  示例见:
    function_as_args.py

案例:
  看懂如下代码:
    def myfun(fn):
        L = [1, 3, 5, 7, 9]
        return fn(L)

    print(myfun(max))  # 9
    print(myfun(min))  # 1
    print(myfun(sum))  # 25
  请问执行结果是什么?为什么?


函数可以作为另一个函数的返回值
  一个函数内部可以用return语句返回另一个函数的引用关系

  示例见:
    return_function.py



练习:
  写一个计算公式的解释执行器, 已知有如下一些函数 
    def myadd(x, y):
        return x + y
    def mysub(x, y):
        return x - y
    def mymul(x, y):
        return x * y
    ...
  另有一个函数get_func,有一个参数op 代表用给定的字符串
    def get_func(op):
        ...  # 此处要添加代码
    此函数在传入字符串"加" 或 '+' 时返回myadd 函数
    此函数在传入字符串"减" 或 '-' 时返回mysub 函数
    ...
  在主函数中:
    def main():
        while True:
           s = input("请输入计算公式": )  # 10 加 20
           L = s.split(' ')   # L = ['10', '加', '20']
           a = int(L[0])
           b = int(L[2])
           fn = get_func(L[1])
           print("结果是:", fn(a, b))  # 结果是: 30
    main()
