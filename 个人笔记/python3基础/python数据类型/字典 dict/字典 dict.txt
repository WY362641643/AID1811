
字典 dict
  什么是字典
    1. 字典是一种可变的容器,可以存储任意类型的数据
    2. 字典中的每个数据都是用"键"(key) 进行索引,而不像序列
       (字符串,列表等) 可以用整数下标进行索引
    3. 字典内的数据没有先后顺序关系,字典的存储是无序的
    4. 字典中的数据以键(key)-值(value) 对的形式进行映射存储
    5. 字典的键不能重复,且只能用不可变类型作为字典的键

  字典的字面值表示方式:
    字典是以{} 括起来,以冒号(:) 分隔键-值对,各键-值对之间用
    逗号分隔

  创建空字典:
    d = {}

  创建非空字典:
    d = {'姓名': 'tarena', '年龄': 15}
    d = {1:'一', 2:'二', 3:'三'}
    d = {1:'One', 2:'Two', 3:'Three'}
    d = {'a': {'b': 100, 'c': 200}}
    d = {'name': None}
    d = {tuple(range(4)): list(range(4))}
    d = {1:'壹', 2:'二', 5:'伍', 1:'一'}  # 重复只留一个

  字典的构造函数 dict
    dict()  # 创建一个空的字典 等同于 {}
    dict(iterable)  用可迭代对象初始化一个字典
    dict(**kwargs)  关键字传参形式生成一个字典

  示例:
    d = dict()   # d = {}
    L = [(1, 2), [3, 4], "AB"]
    d = dict(L)    # d = {1: 2, 3: 4, 'A': 'B'}
    d = dict(name='tarena', age=15)
    注:
      关字键字传参时,关键字的名字必须是符合标识符命名规则的
      字符串


字典的键(key)必须是不可变类型:
  bool, int, float, complex, str, tuple,
  frozenset(固定集合)和bytes(字节串)(后面才学)
  和None对象

    可变的数据类型:
        list, dict, set(集合), bytearray(字节数组) (后面才学)

字典的键索引 
  用[] 运算符可以获取字典内"键" 对应的值
  语法:
    v = 字典[键]
  示例:
    d = {'name': 'tarena', 'age': 20}
    print(d['name'], '今年', d['age'], '岁')

添加和修改字典的元素
  语法:
    字典[键] = 值
  说明:
    如果键不存在,创建键,并绑定键对应的值
    键存在,修改键绑定的值
  示例:
    d = {}
    d['name'] = 'tarena'  # 创建'name'键,对应'tarena'
    d['age'] = 15  # 创建'age'键,绑定 15
    d['age'] = 16  # 修改'age'键,绑定为 16
    print(d)  # 

del 语句
  删除字典的键,同时解除与值的绑定关系
  语法:
    del 字典[键]
  示例:
    d= {'name': 'tarena', 'age':15}
    del d['name']  # 删除'name'键

字典的成员资格判断 in / not in 运算符
  可以用 in 运算符来判断一个＇键＇是否存在于字典中,如果存在则返回
    True,否则返回False
  not in 与 in 结果相反
  示例:
    d = {1:'一', 'aaa': '三个a'}
    1 in d           # True
    '一' in d        # False
    2 not in d       # True
    '三个a' not in d  # True

字典的迭代访问
  字典是可迭代对象,字典只能对键进行迭代访问
  示例:
    d = {'一': 1, '二': 2, '三', 3}
    for x in d:
        print(x)

字典的比较:
  ==  != 
  == 字典是否完全相同(键相同,值也相同则返回True)
  != 与 == 返回值相反

示例:
   {'一': 1, '二': 2} ==  {'二': 2, '一': 1}  # True
   {'一': 1, '二': 2} ==  {'二': 2, '一': 1.1}  # False

字典推导式
  字典推导式是用可迭代对象依次生成字典内元素的表达式

语法:
  {键表达式: 值表达式 for 变量 in 可迭代对象 [if 真值表达式]}
    注: []代表内部的内容可以省略
示例:
  生成一个字典,键为数字(1~9),值为键的平方
  d = {x: x ** 2 for x in range(1, 10)}

字典推导式的嵌套
  语法规则同列表的推导式

字典 vs 列表
  1. 都是可变对象
  2. 索引方式不同(列表用整数索引,字典用键索引)
  3. 字典的插入,删除,修改的速度可能会快于列表(重要)
  4. 列表的存储是有序的,字典的存储是无序的




练习:
  有如下字符串列表:
    L = ['tarena', 'xiaozhang', 'hello']
  请生成如下字典:
    d = {'tarena': 6, 'xiaozhang':9, 'hello':5}
    注: 值为键的长度
  答案:
    d = {x: len(x) for x in L}

练习2:
  已知有两个等长的列表:
    list1 = [1001, 1003, 1008, 1004]
    list2 = ['Tom', 'Jerry', 'Spike', 'Tyke']
  用list2中的元素作为键,用list1中对应的元素作为值,生成如下
  字典
    d = {'Tom': 1001, 'Jerry':1003, 'Spike': 1008,
         'Tyke': 1004}

练习:
  写程序
    1) 将如下信息形成一个字典 seasons
      '键'        '值'
       1      '春季有1,2,3月'
       2      '夏季有4,5,6月'
       3      '秋季有7,8,9月'
       4      '冬季有10,11,12月'
   2) 让用户输入一个整数代表这个季度,打印这个季度的信息,
   如果用户输入的信息不在字典内,则打印"信息不存在"