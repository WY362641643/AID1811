
集合 set
  集合是可变的容器
  集合内的数据对象都是唯一的(不能重复多次的)
  集合是无序的存储结构,集合中的数据没有先后顺序关系
  集合内的元素必须是不可变对象
  集合是可迭代对象
  集合是相当于只有键没有值的字典(键则是集合的数据)

创建空集合:
   set()

创建非空集合的字面值:
   s = {1, 2, 3}

集合的构造(创建)函数 set
   set() 创建一个空集合(注: 不能用{}来创建空集合}
   set(iterable)  用可迭代对象创建一个新的集合对象

示例:
  s = set()  # s绑定一个空集合
  s = {2, 3, 5, 7}
  s = set("ABC")     # s = {'A', 'B', 'C'}
  s = set("ABCCBA")  # s = {'A', 'B', 'C'}
  s = set({1:'一', 2:'二'})  # s = {1, 2}
  s = set([1, 0, 3.14, None])  # {0, 1, 3.14, None}
  s = set([True, False, 1, 0, None])  # s = {False, True, None}
  s = set(("ABC", "123", 123))
  s = {True, None, [1, 2, 3]}  # 出错
  s = {1, 2, {1:'One'}}   # 出错

集合的运算:
    交集&  并集|  补集-  对称补集^  子集<  超集 >

    & 生成两个集合的交集
        s1 = {1, 2, 3}
        s2 = {2, 3, 4}
        s1 & s2  # 得 {2, 3}

    | 生成两个集合的并集
        s1 = {1, 2, 3}
        s2 = {2, 3, 4}
        s1 | s2 # {1, 2, 3, 4}

    - 生成两个集合的补集
        s1 = {1, 2, 3}
        s2 = {2, 3, 4}
        s1 - s2   # {1}
        s2 - s1   # {4}

    ^ 生成两个集合的对称补集
        s1 = {1, 2, 3}
        s2 = {2, 3, 4}
        s1 ^ s2  # 得 {1, 4}

    > 判断一个集合是另一个集合的超集
    < 判断一个集合是另一个集合的子集
        s1 = {1, 2, 3}
        s2 = {2, 3}
        s1 > s2  # True  s1是s2的超集
        s2 < s1  # True  s2 是s1的子集
        s2 > s1  # False

    == != 集合相同或不同
        s1 = {1, 2, 3}
        s2 = {3, 2, 1}
        s1 == s2  # True
        s1 != s2  # False

    其它:
        <= >=
        &=  x &= y相当于  x = x & y
        |=  x |= y相当于  x = x | y
        ^=  x ^= y相当于  x = x ^ y

in / not in 运算符
   同列表的in / not in 作用相同

集合相关的函数:
  len(x)  max(x) min(x) sum(x) any(x) all(x)



集合的方法:
  文档参见:
    python_base_docs_html/set.html

集合推导式:
  集合推导式是用可迭代对象创建集合的表达式

  语法:
    {表达式 for 变量 in 可迭代对象 [if 真值表达式]}
    注:[] 括号内的部分可以省略

  示例:
    L = [1, 2, 3, 6, 5, 4, 3, 2, 1]
    s = {x ** 2 for x in L}
    print(s)
  
  集合推导式的嵌套
    嵌套规则与列表推导式完全相同



    
练习:
  经理有: 曹操, 刘备, 孙权
  技术员有: 曹操, 孙权, 张飞, 关羽
  用集合求:
    1. 即是经理也是技术员的有谁?
    2. 是技术人员,但不是经理的人有谁?
    3. 是经理,但不是技术人员的有谁?
    4. 张飞是经理吗?
    5. 身兼一职的人有谁?
    6. 经理和技术人员共有几个人?

