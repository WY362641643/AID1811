
什么是列表:
    列表是一种容器
    列表是可以被改变的序列
    列表是由一系列特定元素组成,元素与元素之间没有任何的关联关系
      他们之间有先后顺序关系


创建空列表的字面值
        []  创建空列表
    如:
        L = []  # L绑定一个空列表

创建非空列表的字面值
    L = [1, 2, 3, 4]
    L = ['Beijing', 'Shanghai', 'shenzhen']
    L = [1, "二", 3.14, 'four']
    L = [1, 2, [3.1, 3.2], 4]

列表的构造函数 list
    list()   生成一个空的列表,等同于 []
    list(iterable)  用可迭代对象创建一个列表

    示例:
      L = list()  # L 绑定空列表
      L = list("hello")  # L 绑定 ['h', 'e', 'l', 'l', 'o']
      L = list(range(1, 10, 2))  # L=[1,3,5,7,9]

列表的运算:
    算术运算:
      +   +=   *   *=

  + 用于拼接列表
      x = [1, 2, 3]
      y = [4, 5, 6]
      z = x + y  # z = [1, 2, 3, 4, 5, 6]
      z2 = y + x  # z2 = [4, 5, 6, 1, 2, 3]

  += 用于将右侧可迭代对象的数据追加在原列表数据之后
      语法:
        x += 可迭代对象
      如:
        x = [1, 2, 3]
        x += [4, 5, 6]
        x += "ABC"
        x += range(10, 13)
      注:
        列表是可变容器, += 会改变原列表


  * 生成重复的列表
      x = [1, 2] * 3  # x = [1, 2, 1, 2, 1, 2]

  *= 用于生成重复的列表
      x = [1, 2, 3]
      x *= 2  # x = [1, 2, 3, 1, 2, 3]
      y = 3
      y *= [1, 2]  # y = [1, 2, 1, 2, 1, 2]

列表的比较运算:
    运算符:
      < <= > >= == !=
    说明:
      列表的比较规则与字符串的比较规则相同
      列表要求每两个元素能依次进行比较,否则会出现类型错误
    示例:
      x = [1, 2, 3]
      y = [2, 3, 4]
      x != y  # True
      x < y   # True
      [1, 2, 3] < [1, 3, 2]  # True
      [1, "Two"]  > ['Two', 1]  # TypeError
    

列表是可迭代对象:
    L = [1, 3, 5, 10]
    for x in L:
        print(x)


列表的 in / not in 运算符
    判断一个值是否存在于列表中,如果存在返回True,否则返回False
    同字符串的in运算符,用于检查一个值是否存在于列表中

    示例:
      x = [1, 'two', 3, '四']
      3 in x  # True
      4 in x  # False
      5 not in x  # True
      1 not in x  # False


列表的索引操作
      index
    索引的语法:
      列表[整数表达式]
    用法:
      等同于字符串的索引
      索引分为正向索引和反向索引,规则与字符串的规则完全相同
    示例:
      L = [1, 2, 3, 4, 5]
      print(L[1])  # 2
      print(L[-1]) # 5

    列表的索引赋值操作
      列表是可变的序列,可以通过索引赋值改变列表中的元素

      语法:
        列表[整数表达式] = 表达式
    
    示例:
      L = [1, -2, 3, -4, 5]
      L[1] = 2
      print(L)  # [1, 2, 3, -4, 5]
      L[-2] = 4
      print(L)  # [1, 2, 3, 4, 5]


列表的切片
    列表[:]
    列表[::]
    列表的切片是从列表中取出相应的元素,重新组成一个新的列表
    列表的切片规则等同于字符串的切片规则

    示例:
      L = [0, 1, 2, 3, 4, 5, 6, 7, 8]
      L2 = L[1:9:2]  # L2 = [1, 3, 5, 7]

  列表的切片赋值
    作用:
      可以改变原列表的排序,可以插入,删除和修改数据
    语法:
      列表[切片slice] = 可迭代对象
    说明:
      赋值运算符的右则必须是可迭代对象
    示例:
      L = [2, 3.1, 4.2, 5]
      L[1:3] = [3, 4]    # L = [2, 3, 4, 5]
      L[1:3] = [3.1415]  # L = [2, 3.1415, 5]
      L[1:] = range(3, 7)  # L = [2, 3, 4, 5, 6]
      L = [2, 4]
      L[1:1] = [3]      # L = [2, 3, 4]  # L[1:] = [3, 4]
      L[0:0] = range(2) # L = [0, 1, 2, 3, 4]
      L[5:5] = [5, 6]   # L = [0,1,2,3,4,5,6]
      L = [2, 4]
      L[0:0] = "AB"  # L = ['A', 'B', 2, 4]
      L = [2, 4]
      L[0:0] = ["AB"]    # L = ['AB', 2, 4]
      L[::] = []  # 清空, 不等同于 L = []

  注意事项:
    # 第一种做法
    L = [1, 2, 3, 4]
    L2 = L
    L = []　# 变量Ｌ重新绑定一个空列表
    print(L2)  # [1, 2, 3, 4]

    # 第二种做法
    L = [1, 2, 3, 4]
    L2 = L
    L[:] = []  # 此处与上面不同?（将原列表清空）
    print(L2)  # []
    # 问: 以上两种做法有什么区别?


列表的切片操作的注意事项:
  对于步长不等于1的切片赋值,赋值运算符右侧的可迭代对象提供的
  元素个数,一定要等于切片切出的段数
  如:
    L = [1, 2, 3, 4, 5, 6]
    L[::2] = "ABC"    # 对的
    L[::2] = "ABCDE"  # 错的

    
del 语句
    用于删除列表中的元素
    语法:
      del 列表[索引]
      del 列表[切片]
    示例:
      L = [1, 3.14, 2, 100, 3]
      del L[1]
      del L[2]
      print(L)
    说明:
      列表中的元素被删除,后续元素的索引值会变小,即后续元素前移




练习:
  已知有列表:
    L = [3, 5]
    用索引和切片操作,将原列表改为:
    L = [1, 2, 3, 4, 5, 6]
    将列表反转,删除最后一个元素后再打印此列表
    ...
    print(L)  # [6, 5, 4, 3, 2]
  (尽可能让L绑定的对象的ID不变)

练习:
  1. 写一个程序, 输入三行文字,将这三行文字保存于一个列表L中,
    并打印这个列表
    如:
      请输入: abc
      请输入: 123
      请输入: 你好
    生成如下列表: L = ['abc', '123', '你好']
    print(L) # ['abc', '123', '你好']

  2. 写一个程序,让用户输入很多个正整数,当输入负数时结束输入
    将用户输入的数字存于列表中
      1) 然后打印这个列表
      2) 计算出这些数字的和,然后打印出这些和
    如:
      请输入: 1
      请输入: 2
      请输入: 3
      请输入: 4
      请输入: -1
    打印:
      [1, 2, 3, 4]
      和是: 10

